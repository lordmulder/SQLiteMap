<?xml version="1.0" encoding="UTF-8"?>
<project name="SQLiteMap" default="all" basedir=".">
    <fail message="Java version is &quot;${ant.java.version}&quot;, but version &quot;17&quot; is expected!">
        <condition>
            <not><equals arg1="${ant.java.version}" arg2="17"/></not>
        </condition>
    </fail>

    <property environment="env"/>

    <tstamp>
        <format property="build.date" pattern="yyyy-MM-dd" timezone="UTC" locale="en"/>
        <format property="build.time" pattern="HH:mm:ss"   timezone="UTC" locale="en"/>
    </tstamp>

    <property name="base" location="."/>
    <property name="src" location="src"/>
    <property name="test" location="test"/>
    <property name="lib" location="lib"/>
    <property name="build" location="bin"/>
    <property name="doc" location="docs"/>
    <property name="dist" location="dist"/>

    <target name="all" depends="clean,dist" description="default target for clean+dist">
        <echo message="Everything is completed."/>
    </target>

    <target name="init" description="initialize paths">
        <echo message="Base directory: &quot;${base}&quot;"/>
        <mkdir dir="${build}"/>
        <mkdir dir="${doc}"/>
        <mkdir dir="${dist}"/>
    </target>

    <target name="bootpath" description="determine root class path">
        <fail unless="env.JDK8_BOOT_PATH">Environment variable 'JDK8_BOOT_PATH' not found!</fail>
        <property name="bootclass.path" location="${env.JDK8_BOOT_PATH}"/>
        <fail message="JDK 1.8 boot class path &quot;${env.JDK8_BOOT_PATH}&quot; not found!">
            <condition>
                <not><available file="${bootclass.path}"/></not>
            </condition>
        </fail>
        <echo message="JDK8_BOOT_PATH: &quot;${bootclass.path}&quot;"/>
    </target>

    <target name="compile" depends="init,bootpath" description="compile the source">
        <javac srcdir="${src}" destdir="${build}" bootclasspath="${bootclass.path}" includeantruntime="false" debug="off" target="1.8" source="1.8" verbose="true"/>
    </target>

    <target name="compile-test" depends="compile" description="compile the test sources">
        <fail message="Library &quot;junit-jupiter-api&quot; is missing!">
            <condition><resourcecount count="1" when="lt">
                <fileset id="junit-jupiter-api" dir="${lib}" includes="junit-jupiter-api-5*.jar"/>
            </resourcecount></condition>
        </fail>
        <javac srcdir="${test}" destdir="${build}" includes="**/test/**/*.java" includeantruntime="false" debug="on" verbose="true">
            <classpath>
                <pathelement path="${build}"/>
                <fileset refid="junit-jupiter-api"/>
                <fileset dir="${lib}" includes="apiguardian-api-1*.jar"/>
            </classpath>
        </javac>
    </target>

    <target name="version" depends="compile" description="read the version info">
        <loadproperties encoding="iso-8859-1" prefix="sqlitemap" srcfile="${build}/com/muldersoft/container/sqlite/SQLiteMap.class">
            <filterchain><classconstants/></filterchain>
        </loadproperties>
        <fail unless="sqlitemap.VERSION_MAJOR">Property 'VERSION_MAJOR' was not found!</fail>
        <fail unless="sqlitemap.VERSION_MINOR">Property 'VERSION_MINOR' was not found!</fail>
        <fail unless="sqlitemap.VERSION_PATCH">Property 'VERSION_PATCH' was not found!</fail>
        <property name="version.full" value="${sqlitemap.VERSION_MAJOR}.${sqlitemap.VERSION_MINOR}.${sqlitemap.VERSION_PATCH}"/>
        <echo message="Version: ${version.full}"/>
    </target>

    <target name="git-rev" description="detect the current git revision">
        <exec executable="git" dir="${base}" outputproperty="git.revision.commit" failonerror="yes">
            <arg value="rev-parse"/><arg value="HEAD"/>
        </exec>
        <exec executable="git" dir="${base}" outputproperty="git.revision.branch" failonerror="yes">
            <arg value="rev-parse"/><arg value="--abbrev-ref"/><arg value="HEAD"/>
        </exec>
        <echo message="Git Revision: ${git.revision.branch}-${git.revision.commit}"/>
    </target>

    <target name="git-arch" depends="init" description="archive git source tree as file">
        <mkdir dir="${dist}/src"/>
        <property name="git.archive.file" value="${dist}/src/sqlite-map-HEAD.zip"/>
        <delete file="${git.archive.file}"/>
        <exec executable="git" dir="${base}" failonerror="yes">
            <arg value="archive"/><arg value="--verbose"/><arg value="--format=zip"/><arg value="--output=${git.archive.file}"/><arg value="HEAD"/>
        </exec>
    </target>

    <target name="javadoc" depends="init,bootpath" description="generate documentation">
        <javadoc sourcepath="${src}" destdir="${doc}" bootclasspath="${bootclass.path}" source="1.8" access="protected" doctitle="SQLiteMap" windowtitle="SQLiteMap" failonerror="yes">
            <bottom>Created by LoRd_MuldeR &amp;lt;mulder2@gmx.de&amp;gt; | License: CC0 1.0 Universal</bottom>
        </javadoc>
    </target>

    <target name="manifest" depends="version,git-rev" description="generate the manifest">
        <property name="manifest.file" value="${build}/META-INF/MANIFEST.MF"/>
        <echo message="File: &quot;${manifest.file}&quot;"/>
        <truncate file="${manifest.file}" create="true" mkdirs="true"/>
        <manifest file="${manifest.file}">
            <attribute name="Build-Date" value="${build.date}"/>
            <attribute name="Build-Revision" value="${git.revision.branch}-${git.revision.commit}"/>
            <attribute name="Build-Time" value="${build.time}"/>
            <attribute name="Bundle-License" value="https://creativecommons.org/publicdomain/zero/1.0/"/>
            <attribute name="Bundle-Name" value="SQLiteMap"/>
            <attribute name="Bundle-SymbolicName" value="com.muldersoft.container.sqlite"/>
            <attribute name="Bundle-Version" value="${version.full}"/>
            <attribute name="Implementation-Title" value="SQLiteMap"/>
            <attribute name="Implementation-Vendor" value="LoRd_MuldeR &lt;mulder2@gmx.de&gt;"/>
            <attribute name="Implementation-Version" value="${version.full}"/>
            <attribute name="Specification-Title" value="SQLiteMap"/>
            <attribute name="Specification-Vendor" value="LoRd_MuldeR &lt;mulder2@gmx.de&gt;"/>
            <attribute name="Specification-Version" value="${version.full}"/>
        </manifest>
    </target>

    <target name="jar" depends="compile,manifest,javadoc" description="generate the jar files">
        <mkdir dir="${dist}/jar"/>
        <property name="jar.file.bin" value="${dist}/jar/sqlite-map-${version.full}.jar"/>
        <delete file="${jar.file.bin}"/>
        <jar jarfile="${jar.file.bin}" manifest="${manifest.file}">
            <fileset dir="${build}" includes="**/*.class" excludes="**/test/**"/>
        </jar>
        <property name="jar.file.doc" value="${dist}/jar/sqlite-map-${version.full}-javadoc.jar"/>
        <delete file="${jar.file.doc}"/>
        <jar jarfile="${jar.file.doc}" manifest="${manifest.file}">
            <fileset dir="${doc}" includes="**/*"/>
        </jar>
        <property name="jar.file.src" value="${dist}/jar/sqlite-map-${version.full}-sources.jar"/>
        <delete file="${jar.file.src}"/>
        <jar jarfile="${jar.file.src}" manifest="${manifest.file}">
            <fileset dir="${src}" includes="**/*.java" excludes="**/test/**"/>
        </jar>
    </target>

    <target name="dist" depends="jar,git-arch" description="generate the zip files for distribution">
        <property name="zip.file.bin" value="${dist}/sqlite-map-${version.full}-bin.zip"/>
        <delete file="${zip.file.bin}"/>
        <zip destfile="${zip.file.bin}">
            <fileset file="${jar.file.bin}"/>
            <fileset file="${jar.file.doc}"/>
            <fileset file="${jar.file.src}"/>
            <zipfileset prefix="docs" dir="${doc}" includes="**/*"/>
            <fileset file="${base}/README.md"/>
            <fileset file="${base}/LICENSE.txt"/>
        </zip>
        <property name="zip.file.src" value="${dist}/sqlite-map-${version.full}-src.zip"/>
        <delete file="${zip.file.src}"/>
        <zip destfile="${zip.file.src}">
            <zipfileset src="${git.archive.file}"/>
        </zip>
    </target>

    <target name="clean" depends="init" description="clean up build files">
        <delete includeemptydirs="true" verbose="true">
            <fileset dir="${build}" includes="**/*" excludes=".gitkeep"/>
            <fileset dir="${doc}"   includes="**/*" excludes=".gitkeep"/>
            <fileset dir="${dist}"  includes="**/*" excludes=".gitkeep"/>
        </delete>
    </target>
</project>
